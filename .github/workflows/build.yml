name: Build
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  go-version: '^1.19.0'
  zig-version: '0.9.1'

jobs:
  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace

  test:
    strategy:
      fail-fast: true
      matrix:
        platform: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      - name: Install libdbus-1-dev
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        run: sudo apt-get install -y libdbus-1-dev
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{matrix.platform }}
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace

  build-scripts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      - uses: Swatinem/rust-cache@v2
      - name: Build build-scripts
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --package build-scripts
      - run: cp target/debug/build-scripts ./_build
      - uses: actions/upload-artifact@v3
        with:
          name: build-scripts
          path: _build
          if-no-files-found: error
          retention-days: 1

  version:
    runs-on: ubuntu-latest
    needs: [ build-scripts ]
    outputs:
      version: ${{ steps.getCirrusVersion.outputs.VERSION }}
      build-string: ${{ steps.getCirrusVersion.outputs.BUILD_STRING }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: build-scripts
      - run: chmod +x ./_build
      - name: Get cirrus version
        id: getCirrusVersion
        run: ./_build get-version >> "$GITHUB_OUTPUT"
      - name: Show version
        run: echo '`${{ steps.getCirrusVersion.outputs.VERSION }}` - `${{ steps.getCirrusVersion.outputs.BUILD_STRING }}`' > $GITHUB_STEP_SUMMARY

  package-glibc:
    # older Ubuntu version because of glibc compatibility
    runs-on: ubuntu-20.04
    needs:
      - build-scripts
      - version
    strategy:
      fail-fast: true
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - aarch64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: build-scripts
      - run: chmod +x ./_build
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go-version }}
          cache: true
          cache-dependency-path: vendor/restic/go.sum
      - name: Install cross-compiling toolchains
        run: sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf
      - name: Install meson
        run: sudo pip3 install meson ninja
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{matrix.target }}
      - name: Build package
        run: >
          ./_build package
          --version ${{ needs.version.outputs.version }}
          --build-string ${{ needs.version.outputs.build-string }}
          --target ${{ matrix.target }}
          --meson-cross-file .github/workflows/meson-${{ matrix.target }}.ini
          --features bundled-restic-support
          --static-dbus
          --build-restic
      - uses: actions/upload-artifact@v3
        with:
          name: cirrus_${{ matrix.target }}
          path: public/*
          if-no-files-found: error

  package-windows:
    runs-on: ubuntu-latest
    needs:
      - build-scripts
      - version
    env:
      target: x86_64-pc-windows-gnu
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: build-scripts
      - run: chmod +x ./_build
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ env.target }}
          profile: minimal
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go-version }}
          cache: true
          cache-dependency-path: vendor/restic/go.sum
      - name: Install mingw cross compiler
        run: sudo apt-get install -y gcc-mingw-w64-x86-64
      - uses: Swatinem/rust-cache@v2
      - name: Build package
        run: >
          ./_build package
          --version ${{ needs.version.outputs.version }}
          --build-string ${{ needs.version.outputs.build-string }}
          --target ${{ env.target }}
          --features bundled-restic-support
          --build-restic
      - uses: actions/upload-artifact@v3
        with:
          name: cirrus_${{ env.target }}
          path: public/*
          if-no-files-found: error

  package-musl:
    runs-on: ubuntu-latest
    needs:
      - build-scripts
      - version
    strategy:
      fail-fast: true
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
    env:
      CARGO_PROFILE_RELEASE_LTO: thin
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: build-scripts
      - run: chmod +x ./_build
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
      - uses: actions/setup-go@v3
        with:
          go-version: ${{env.go-version }}
          cache: true
          cache-dependency-path: vendor/restic/go.sum
      - name: Install meson
        run: sudo pip3 install meson ninja
      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v1
        with:
          version: ${{ env.zig-version }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{matrix.target }}
      - name: Build package
        run: >
          ./_build package
          --version ${{ needs.version.outputs.version }}
          --build-string ${{ needs.version.outputs.build-string }}
          --target ${{ matrix.target }}
          --meson-cross-file .github/workflows/meson-zig-${{ matrix.target }}.ini
          --features bundled-restic-support
          --static-dbus
          --build-restic
      - uses: actions/upload-artifact@v3
        with:
          name: cirrus_${{ matrix.target }}
          path: public/*
          if-no-files-found: error

  publish-container-image:
    if: ${{ github.event_name == 'push' }}
    needs:
      - build-scripts
      - version
      - package-glibc
      - package-musl
    uses: ./.github/workflows/publish-container-image.yml
    with:
      version: ${{ needs.version.outputs.version }}
      build-string: ${{ needs.version.outputs.build-string }}

  publish-package:
    if: ${{ github.event_name == 'push' }}
    needs:
      - version
      - package-glibc
      - package-musl
      - package-windows
    uses: ./.github/workflows/publish-package.yml
    with:
      version: ${{ needs.version.outputs.version }}
      build-string: ${{ needs.version.outputs.build-string }}
