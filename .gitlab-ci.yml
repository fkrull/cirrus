image: registry.gitlab.com/fkrull/cirrus/ci-tools:latest

variables:
  STORAGE_DRIVER: vfs
  BUILDAH_ISOLATION: chroot
  CARGO_HOME: ${CI_PROJECT_DIR}/cargo
  SCCACHE_DIR: ${CI_PROJECT_DIR}/sccache
  RUSTC_WRAPPER: sccache

cache:
  paths:
    - cargo/
    - sccache/

include:
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'

stages:
  - tools
  - test
  - package
  - manifest
  - publish


# ----
tools:ci-tools-image:
  stage: tools
  image: fedora:33
  when: manual
  before_script:
    - dnf install -y buildah
  script:
    - buildah build-using-dockerfile
      --creds $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD
      -t docker://registry.gitlab.com/fkrull/cirrus/ci-tools:latest
      build-scripts/ci-tools

test:
  stage: test
  script:
    - cargo fmt -- --check
    - sccache --start-server
    - cargo test --workspace --all-features
    - sccache --show-stats

# package steps
desktop:linux:x86_64:
  extends: .desktop
  stage: package
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: manual
      allow_failure: true
  variables:
    TARGET: x86_64-unknown-linux-gnu
    PACKAGE: tarbz2
    VERSION: ${CI_COMMIT_REF_NAME}

desktop:windows:x86_64:
  extends: .desktop
  stage: package
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: manual
      allow_failure: true
  variables:
    TARGET: x86_64-pc-windows-gnu
    PACKAGE: zip
    VERSION: ${CI_COMMIT_REF_NAME}
    ARGS: --cirrus-gui

appx:x86_64:
  extends: .appx
  stage: package
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: manual
      allow_failure: true
  variables:
    TARGET: x86_64-pc-windows-msvc
    APPX_VERSION: ${CI_COMMIT_REF_NAME}

server:linux:x86_64:
  extends: .server
  stage: package
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: manual
      allow_failure: true
  variables:
    TARGET: x86_64-unknown-linux-musl
    TAG: ${CI_COMMIT_REF_NAME}-linux-amd64

server:linux:armv7:
  extends: .server
  stage: package
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: manual
      allow_failure: true
  variables:
    TARGET: armv7-unknown-linux-musleabihf
    QEMU_BINARY: /usr/bin/qemu-arm-static
    TAG: ${CI_COMMIT_REF_NAME}-linux-arm32v7

server:linux:aarch64:
  extends: .server
  stage: package
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: manual
      allow_failure: true
  variables:
    TARGET: aarch64-unknown-linux-musl
    QEMU_BINARY: /usr/bin/qemu-aarch64-static
    TAG: ${CI_COMMIT_REF_NAME}-linux-arm64v8

# package manifests
server:manifest:
  stage: manifest
  needs:
    - server:linux:x86_64
    - server:linux:armv7
    - server:linux:aarch64
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: manual
      allow_failure: true
  script:
    - buildah manifest create cirrus-manifest-list
      docker://registry.gitlab.com/fkrull/cirrus/server:${CI_COMMIT_REF_NAME}-linux-amd64
      docker://registry.gitlab.com/fkrull/cirrus/server:${CI_COMMIT_REF_NAME}-linux-arm32v7
      docker://registry.gitlab.com/fkrull/cirrus/server:${CI_COMMIT_REF_NAME}-linux-arm64v8
    - buildah manifest push
      --creds $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD
      cirrus-manifest-list
      docker://registry.gitlab.com/fkrull/cirrus/server:${CI_COMMIT_REF_NAME}

desktop:manifest:
  stage: manifest
  needs:
    - desktop:linux:x86_64
    - desktop:windows:x86_64
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: manual
      allow_failure: true
  script:
    - cargo run -p build-scripts --bin package-manifest --
      --package-dir public
      --url-prefix https://gitlab.com/fkrull/cirrus/-/package_files/TODO/
  variables:
    VERSION: ${CI_COMMIT_REF_NAME}
  artifacts:
    paths:
      - public
    expire_in: 1 day

# publish
server:publish:
  stage: publish
  needs:
    - server:manifest
  rules:
    - if: $CI_COMMIT_TAG
      when: always
  script:
    - skopeo copy
      --all
      --dest-creds $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD
      docker://registry.gitlab.com/fkrull/cirrus/server:${CI_COMMIT_REF_NAME}
      docker://registry.gitlab.com/fkrull/cirrus/server:latest

desktop:publish:
  stage: publish
  needs:
    - desktop:manifest
  rules:
    - if: $CI_COMMIT_TAG
      when: always
  script:
    - ls -lh public
    - "false"

#pages:
#  stage: publish
#  needs: [ "appx:x86_64" ]
#  rules:
#    - if: $CI_COMMIT_TAG
#      when: always
#  script:
#    - cargo run -p build-scripts --bin publish-files
#  artifacts:
#    paths:
#      - public


# ----
# build desktop binary package
.desktop:
  before_script:
    - rustup target add ${TARGET}
  script:
    - sccache --start-server
    - cargo run -p build-scripts --bin package-generic --
      --target ${TARGET}
      --features desktop
      --package-name cirrus-desktop_${VERSION}_${TARGET}
      --package ${PACKAGE}
      ${ARGS}
    - sccache --show-stats
  artifacts:
    paths:
      - public
    expire_in: 1 day

# build Linux container image
.server:
  before_script:
    - rustup target add ${TARGET}
  script:
    - sccache --start-server
    - cargo run -p build-scripts --bin server --
      --target ${TARGET}
      --qemu-binary "${QEMU_BINARY}"
    - sccache --show-stats
    - buildah push
      --creds $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD
      cirrus-server-image
      docker://registry.gitlab.com/fkrull/cirrus/server:${TAG}

# build Windows appx package
.appx:
  tags:
    - shared-windows
    - windows
    - windows-1809
  before_script:
    - choco install -y sccache
    - Invoke-WebRequest https://win.rustup.rs/x86_64 -OutFile rustup-init.exe
    - $env:CARGO_HOME = "$env:USERPROFILE/.cargo"
    - ./rustup-init.exe -y --default-host="$TARGET" --default-toolchain=stable --profile=minimal
    - $env:CARGO_HOME = "${CI_PROJECT_DIR}/cargo"
    - $env:PATH += ";$env:USERPROFILE/.cargo/bin"

    - $sdkPath = (Get-ItemProperty "HKLM:\Software\Microsoft\Windows Kits\Installed Roots").KitsRoot10
    - $latest = Get-ChildItem "$sdkPath\bin"
      | Foreach-Object {$_.Name}
      | Select-String "10.0"
      | Sort-Object
      | Select-Object -Last 1
    - $env:PATH += ";$sdkPath\bin\$latest\x64"
  script:
    - $thumbprint = build-scripts\windows\import-base64-certificate.ps1 Cert:\LocalMachine\My
    - sccache --start-server
    - cargo run -p build-scripts --bin appx --
      --target ${TARGET}
      --version ${APPX_VERSION}
      --cert-thumbprint $thumbprint
      --use-system-cert-store
    - sccache --show-stats
  artifacts:
    paths:
      - public
    expire_in: 1 day
